# timetemplate.S
# Written 2015 by F Lundevall
# Ported 2024/06 by W Szczerek (from MIPS to RISC-V)
# Copyright abandonded - this file is in the public domain.

#############################################################
# Choose the macro syntax for RARS or DTEK-V board.         #
# The syntax for RARS is probably due to its MIPS heritage. #
#############################################################
###################
# Macros for RARS #
###################
#.macro	PUSH (%reg)
#	addi	sp,sp,-4
#	sw	%reg,0(sp) 
#.end_macro

#.macro	POP (%reg)
#	lw	%reg,0(sp)
#	addi	sp,sp,4
#.end_macro
###################
# Macros for DTEK #
###################
.macro	PUSH reg
	addi sp,sp,-4
	sw \reg,0(sp) 
.endm

.macro	POP reg
	lw	\reg,0(sp)
	addi	sp,sp,4
.endm
############################################################

	.data
	.align 2
mytime:	.word 	0x5957
timstr:	.asciz 	"text more text lots of text\0"
	.text
	.globl timetemplate, tick, time2string, delay, display_string

# Function for displaying a string with a newline at the end	
display_string:	
	li a7,4
	ecall
	li a0, 10
	li a7,11
	ecall
	jr ra
	
timetemplate:
	la	a0, timstr
	jal     display_string
	
	# wait a little
	li	a0, 1000		# ms
	jal	delay
	
	# call tick
	la 	a0, mytime
	jal	tick
	
	# call your function time2string
	la	a0, timstr
	la	t0, mytime
	lw	a1, 0(t0)
	jal	time2string
	
	# go back and do it all again
	j	timetemplate

	
# tick: update time pointed to by $a0
tick:	lw	t0, 0(a0)	# get time
	addi	t0, t0, 1	# increase
	andi	t1, t0, 0xf	# check lowest digit
	sltiu	t2, t1, 0xa	# if digit < a, okay
	bnez	t2, tiend
	addi	t0, t0, 0x6	# adjust lowest digit
	
	andi	t1, t0, 0xf0	# check next digit
	sltiu	t2, t1, 0x60	# if digit < 6, okay
	bnez	t2, tiend
	addi	t0, t0, 0xa0	# adjust digit
	
	li	t3, 0xF
	slli	t3, t3, 0x8
	and	t1, t0, t3	# check minute digit
	addi	t3, x0, 0xA
	slli	t3, t3, 0x8
	slt	t2, t1, t3	# if digit < a, okay
	bnez	t2, tiend
	addi	t0, t0, 0x600	# adjust digit - this one's okay, it's lower than 0x7FF 
	
	li	t3, 0xF
	slli	t3, t3, 0xC
	and	t1, t0, t3	# check last digit
	addi	t3, x0, 0x6
	slli	t3, t3, 0xC
	slt	t2, t1, t3	# if digit < 6, okay
	bnez	t2, tiend
	
	li	t3, 0xA
	slli	t3, t3, 0xC
	add	t0, t0, t3	# adjust last digit
tiend:	sw	t0,0(a0)	# save updated result
	jr	ra		# return

#########################################################
# Place for your functions: time2string, hex2asc, delay.#
#########################################################
delay:
	# a0 är millisekunder
	delayloop:
		blez a0,delayend
		addi a0,a0,-1
		li t0,14999 # this constant can easily be changed if you absolutely need to
		millisecondloop:
			addi t0,t0,-1
			bgez t0,millisecondloop
		j delayloop
	delayend:
		jr ra

# ao - a
time2string:
	# Spara s0 och ra
	PUSH s0
	PUSH ra

	# Börjar med att spara a0 i s0
	mv s0,a0

	# Första minutsiffran
	li a0,0xF000
	and a0,a1,a0
	srli a0,a0,12
	jal hexasc
	sb a0,0(s0) # obs! minnesadressen finns i s0 istället för a0
	
	# Andra minutsiffran
	li a0,0x0F00
	and a0,a1,a0
	srli a0,a0,8
	jal hexasc
	sb a0,1(s0) # obs! minnesadressen finns i s0 istället för a0

	addi t0,zero,0x3A
	sb t0,2(s0) # :

	# Första sekundsiffran
	li a0,0x00F0
	and a0,a1,a0
	srli a0,a0,4
	jal hexasc
	sb a0,3(s0) # obs! minnesadressen finns i s0 istället för a0

	# Andra sekundsiffran
	li a0,0x000F
	and a0,a1,a0
	# ingen bitshift behövs
	
	# print "TWO" if = 2
	li t0,0x02
	beq a0,t0,printtwo
	
	jal hexasc
	sb a0,4(s0) # obs! minnesadressen finns i s0 istället för a0
	sb zero,5(s0) # null
	j fortsatt
	
printtwo:
	li t0,0x54
	sb t0,4(s0)
	li t0,0x57
	sb t0,5(s0)
	li t0,0x4f
	sb t0,6(s0)
	sb zero,7(s0) # null

fortsatt:
	# Hämta ra och s0
	POP ra
	POP s0
			
	jr ra

	
hexasc:
	andi t0,a0,0x0F
	addi t0,t0,-9
	bgtz t0,char
hexasc2:
	addi t0,t0,9
	addi t0,t0,0x30
	add a0,t0,zero
	andi a0,a0,0x7F
	jr ra
char:
	addi t0,t0,7
	j hexasc2